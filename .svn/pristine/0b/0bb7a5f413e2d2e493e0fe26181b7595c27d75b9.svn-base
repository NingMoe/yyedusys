using Dapper;
using DapperExtensions;
using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using YY.Edu.Sys.Comm.Helper;

namespace YY.Edu.Sys.Api.Controllers
{
    [RoutePrefix("api/Coach/TeachingSchedule")]
    public class TeachingScheduleController : ApiController
    {
        private static readonly ILog logs = Comm.Helper.LogHelper.GetInstance();

        // GET: api/TeachingSchedule
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET: api/TeachingSchedule/5
        public string Get(int id)
        {
            return "value";
        }

        [HttpPost]
        public IHttpActionResult Create(Models.RequestModel.TeachingScheduleRequest teachingschedule)
        {

            logs.Info(Newtonsoft.Json.JsonConvert.SerializeObject(teachingschedule));

            if (!ModelState.IsValid)
                return BadRequest();

            try
            {
                //上课周期
                string[] curriculumDateArr = teachingschedule.CurriculumDateStr
                    .Split("to".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);


               


                DateTime startDate = Convert.ToDateTime(curriculumDateArr[0]);
                DateTime endDate = Convert.ToDateTime(curriculumDateArr[1]);

                List<Sys.Models.TeachingSchedule> entityList = new List<Sys.Models.TeachingSchedule>();

                bool isContain = true;
                while (isContain)
                {

                    //上午上课
                    entityList.AddRange(BuildClass(startDate, teachingschedule.CurriculumAMTime, teachingschedule));
                    //下午上课
                    entityList.AddRange(BuildClass(startDate, teachingschedule.CurriculumPMTime, teachingschedule));

                    startDate = startDate.AddDays(1);
                    if (startDate > endDate)
                        isContain = false;
                }

                bool isOk = false;

                System.Data.IDbConnection connection = Comm.Helper.DapperHelper.Instance;
                using (connection)
                {
                    connection.Open();
                    System.Data.IDbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        connection.Insert<Sys.Models.TeachingSchedule>(entityList, transaction);
                        transaction.Commit();
                        isOk = true;
                    }
                    catch (Exception ex)
                    {
                        logs.Error("排课失败", ex);
                        transaction.Rollback();
                        return BadRequest();
                    }
                }

                return isOk ? Ok(Comm.ResponseModel.ResponseModelBase.Success()) : Ok(Comm.ResponseModel.ResponseModelBase.SysError());
            }
            catch (Exception ex)
            {
                logs.Error("排课失败", ex);
                return BadRequest();
            }
        }

        private IList<Sys.Models.TeachingSchedule> BuildClass(DateTime startDate, string CurriculumTime, Models.RequestModel.TeachingScheduleRequest teachingschedule)
        {

            IList<Sys.Models.TeachingSchedule> entityList = new List<Sys.Models.TeachingSchedule>();

            string[] curriculumAMTimeArr = CurriculumTime.Split('-');
            DateTime amClass = Convert.ToDateTime("2008-08-08 " + curriculumAMTimeArr[0]);
            DateTime amClassOver = Convert.ToDateTime("2008-08-08 " + curriculumAMTimeArr[1]);

            bool classIsContain = true;
            while (classIsContain)
            {
                DateTime classOverTime = amClass.AddMinutes(teachingschedule.ClassLength);

                Sys.Models.TeachingSchedule info = new Sys.Models.TeachingSchedule()
                {
                    AddTime = DateTime.Now,
                    CurriculumDate = startDate,
                    CurriculumBeginTime = amClass.ToString("HH:mm"),
                    CurriculumEndTime = classOverTime.ToString("HH:mm"),
                    Info = teachingschedule.Info,
                    CampusID = teachingschedule.CampusID,
                    CoachID = teachingschedule.CoachID,
                    CoachPrice = teachingschedule.CoachPrice,
                    PKType = teachingschedule.PKType,
                    Price = teachingschedule.Price,
                    State = 1,
                    Title = teachingschedule.Title,
                    VenueID = teachingschedule.VenueID,
                };

                //info = teachingschedule;
                

                //设置下一节课上课时间
                if (classOverTime >= amClassOver)
                {
                    info.CurriculumEndTime = amClassOver.ToString("HH:mm");
                    classIsContain = false;
                }

                entityList.Add(info);
                amClass = amClass.AddMinutes(teachingschedule.ClassLength).AddMinutes(teachingschedule.RestLength);

            }

            return entityList;
        }

        [HttpGet]
        public IHttpActionResult Page4Venue(string query)
        {
            try
            {

                if (!ModelState.IsValid)
                    return BadRequest();

                Comm.RequestModel.RequestModelBase<Sys.Models.TeachingSchedule> oData = Newtonsoft.Json.JsonConvert.DeserializeObject<Comm.RequestModel.RequestModelBase<Sys.Models.TeachingSchedule>>(query);

                if (oData.PageIndex < 0 || oData.PageSize <= 0)
                    return BadRequest();

                PageCriteria criteria = new PageCriteria();
                criteria.Condition = "1=1";

                if (oData.SearchCondition.VenueID > 0)
                    criteria.Condition += string.Format(" and t.VenueID = {0}", oData.SearchCondition.VenueID);
                if (oData.SearchCondition.CampusID > 0)
                    criteria.Condition += string.Format(" and t.CampusID = {0}", oData.SearchCondition.CampusID);
                if (oData.SearchCondition.CoachID > 0)
                    criteria.Condition += string.Format(" and t.CoachID = {0}", oData.SearchCondition.CoachID);
                if (oData.SearchCondition.State > -1)
                    criteria.Condition += string.Format(" and t.State = {0}", oData.SearchCondition.State);
                if (oData.SearchCondition.PKType > 0)
                    criteria.Condition += string.Format(" and t.PKType = {0}", oData.SearchCondition.PKType);
                if (!string.IsNullOrEmpty(oData.SearchCondition.CurriculumBeginTime))
                    criteria.Condition += string.Format(" and t.CurriculumDate >= '{0}'", oData.SearchCondition.CurriculumBeginTime);
                if (!string.IsNullOrEmpty(oData.SearchCondition.CurriculumEndTime))
                    criteria.Condition += string.Format(" and t.CurriculumDate < '{0}'", Convert.ToDateTime(oData.SearchCondition.CurriculumEndTime).AddDays(1));

                criteria.CurrentPage = oData.PageIndex + 1;
                criteria.Fields = "t.PKID,t.VenueID,t.CampusID,t.CoachID,t.Title,t.CurriculumDate,t.CurriculumBeginTime,t.CurriculumEndTime,t.AddTime,t.Price,t.CoachPrice,t.PKType,t.State,t.Info,v.VenueName,c.CampusName,c2.FullName as CoachFullName,c3.StudentFullName";
                criteria.PageSize = oData.PageSize;
                criteria.TableName = "TeachingSchedule as t join Venue as v on t.VenueID=v.VenueID join Campus as c on c.CampusID=t.CampusID join Coach as c2 on t.CoachID=c2.CoachID left join Curriculum as c3 on t.PKID=c3.PKID";
                criteria.PrimaryKey = "t.PKID";

                var r = Comm.Helper.DapperHelper.GetPageData<Models.ResponseModel.TeachingScheduleResponse>(criteria);

                return Ok(new Comm.ResponseModel.ResponseModel4Page<Models.ResponseModel.TeachingScheduleResponse>()
                {
                    data = r.Items,
                    recordsFiltered = r.TotalNum,
                    recordsTotal = r.TotalNum,
                });
            }
            catch (Exception ex)
            {
                logs.Error("排课查询失败", ex);
                return BadRequest();
            }
        }

        
        // POST: api/TeachingSchedule
        public void Post([FromBody]string value)
        {
        }

        // PUT: api/TeachingSchedule/5
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE: api/TeachingSchedule/5
        public void Delete(int id)
        {
        }
    }
}
