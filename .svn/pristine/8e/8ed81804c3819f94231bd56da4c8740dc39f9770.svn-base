using Newtonsoft.Json.Linq;
using Senparc.Weixin.MP.AdvancedAPIs.OAuth;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;
using YY.Edu.Sys.Comm.Helper;

namespace YY.Edu.Sys.Web.Services
{
    public class WxUserService
    {

        private HttpRequestHelper RequestHelper;
        private System.Net.Http.HttpClient _httpClient;

        public WxUserService()
        {
            _httpClient = new System.Net.Http.HttpClient();
            RequestHelper = new HttpRequestHelper();
        }

        /// <summary>
        /// 关注用户回写数据库
        /// </summary>
        /// <param name="userInfo"></param>
        /// <returns></returns>
        public bool FollowMP(OAuthUserInfo userInfo)
        {

            //todo 用户取关检测
            //检查输入项
            string apiUrl = System.Configuration.ConfigurationManager.AppSettings["ApiUrl"];
            string url = string.Format("{0}/WxUserInfo/Create", apiUrl);

            RequestHelper.Create(url);
            RequestHelper.WebRequest.ContentType = "application/json;charset=UTF-8";
            RequestHelper.WebRequest.Headers.Add("Accept-Encoding: gzip, deflate");
            RequestHelper.WebRequest.AutomaticDecompression = System.Net.DecompressionMethods.Deflate;

            var tmp = new Sys.Models.WxUserInfo()
            {
                City = userInfo.city,
                Country = userInfo.country,
                HeadImgUrl = userInfo.headimgurl,
                LastLoginTime = DateTime.Now,
                NickName = userInfo.nickname,
                OpenId = userInfo.openid,
                Province = userInfo.province,
                Sex = userInfo.sex == 1,
                State = 1,
            };

            string jsonStr = JsonHelper.ToJsonStringByNewtonsoft(tmp);

            string result = RequestHelper.PostString(jsonStr);
            JObject jo = JObject.Parse(result);
            if (Convert.ToBoolean(jo["Error"].ToString()))
                throw new Comm.YYException.YYException(jo["Msg"].ToString());

            return true;
        }

        /// <summary>
        /// 报告地理位置
        /// </summary>
        /// <param name="wxuserInfo"></param>
        /// <returns></returns>
        public bool ReportPosition(Sys.Models.WxUserInfo userInfo)
        {

            //检查输入项
            string apiUrl = System.Configuration.ConfigurationManager.AppSettings["ApiUrl"];
            string url = string.Format("{0}/WxUserInfo/SetPosition", apiUrl);

            RequestHelper.Create(url);
            RequestHelper.WebRequest.ContentType = "application/json;charset=UTF-8";
            RequestHelper.WebRequest.Headers.Add("Accept-Encoding: gzip, deflate");
            RequestHelper.WebRequest.AutomaticDecompression = System.Net.DecompressionMethods.Deflate;

            string jsonStr = JsonHelper.ToJsonStringByNewtonsoft(userInfo);

            string result = RequestHelper.PostString(jsonStr);
            JObject jo = JObject.Parse(result);
            if (Convert.ToBoolean(jo["Error"].ToString()))
                throw new Comm.YYException.YYException(jo["Msg"].ToString());

            return true;
        }
      
        /// <summary>
        /// 获取用户的位置
        /// </summary>
        /// <param name="openId"></param>
        /// <returns>返回元组 经度、纬度</returns>
        public Tuple<decimal, decimal> GetPosition(string openId)
        {

            //检查输入项
            string apiUrl = System.Configuration.ConfigurationManager.AppSettings["ApiUrl"];
            string url = string.Format("{0}/WxUserInfo/Get?openid={1}", apiUrl, openId);

            RequestHelper.Create(url);
            RequestHelper.WebRequest.ContentType = "application/json;charset=UTF-8";
            RequestHelper.WebRequest.Headers.Add("Accept-Encoding: gzip, deflate");
            RequestHelper.WebRequest.AutomaticDecompression = System.Net.DecompressionMethods.Deflate;

            string result = RequestHelper.RunGetRequest();
            JObject jo = JObject.Parse(result);
            if (Convert.ToBoolean(jo["Error"].ToString()))
                throw new Comm.YYException.YYException(jo["Msg"].ToString());

            return new Tuple<decimal, decimal>(Convert.ToDecimal(jo["Info"]["Longitude"].ToString()),
                Convert.ToDecimal(jo["Info"]["Latitude"].ToString()));
        }

        /// <summary>
        /// 获取token信息
        /// </summary>
        /// <param name="email"></param>
        /// <param name="passWord"></param>
        /// <returns></returns>
        public async System.Threading.Tasks.Task<string> GetToken(string domain, string openId, string passWord)
        {

            string url = System.Configuration.ConfigurationManager.AppSettings["ApiUrl"];
            _httpClient.BaseAddress = new System.Uri(url);

            string clientId = System.Web.Configuration.WebConfigurationManager.AppSettings["ClientId"];
            string clientSecret = System.Web.Configuration.WebConfigurationManager.AppSettings["ClientSecret"];

            var parameters = new Dictionary<string, string>();
            parameters.Add("grant_type", "password");
            parameters.Add("UserName", openId);
            //parameters.Add("password", passWord);

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(
                "Basic",
                System.Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(clientId + ":" + clientSecret)));

            var response = await _httpClient.PostAsync("/token?domain=" + domain, new FormUrlEncodedContent(parameters));
            var responseValue = await response.Content.ReadAsStringAsync();

            return responseValue;
        }

        /// <summary>
        /// 获取我的信息
        /// </summary>
        /// <param name="token"></param>
        /// <param name="email"></param>
        /// <returns></returns>
        public async System.Threading.Tasks.Task<string> GetMe(string domain, string token, string openId)
        {

            string url = System.Configuration.ConfigurationManager.AppSettings["ApiUrl"];
            _httpClient.BaseAddress = new System.Uri(url);

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            if (domain.ToLower().Contains("student"))
            {
                return (await (await _httpClient.GetAsync("api/Student/GetMe?openId=" + openId)).Content.ReadAsStringAsync());
            }
            else if (domain.ToLower().Contains("coach"))
            {
                return (await (await _httpClient.GetAsync("api/Coach/GetMe?openId=" + openId)).Content.ReadAsStringAsync());
            }

            throw new Comm.YYException.YYException("非法访问");
        }


    }
}