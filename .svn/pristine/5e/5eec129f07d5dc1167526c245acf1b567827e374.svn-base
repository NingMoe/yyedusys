using Dapper;
using DapperExtensions;
using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using YY.Edu.Sys.Comm.Helper;

namespace YY.Edu.Sys.Api.Controllers
{
    [RoutePrefix("api/ApplyBuyHours")]
    public class ApplyBuyHoursController : ApiController
    {

        private static readonly ILog logs = Comm.Helper.LogHelper.GetInstance();

        /// <summary>
        /// 添加缴费记录
        /// </summary>
        /// <param name="applyBuyHours"></param>
        /// <returns></returns>
        public IHttpActionResult Create(Sys.Models.ApplyBuyHours applyBuyHours)
        {

            if (!ModelState.IsValid)
                return BadRequest();

            try
            {
                Comm.Helper.DapperHelper.Instance.Insert<Sys.Models.ApplyBuyHours>(applyBuyHours);
                return Ok(Comm.ResponseModel.ResponseModelBase.Success());
            }
            catch (Exception ex)
            {
                logs.Error("添加缴费记录失败", ex);
                return BadRequest();
            }
        }

        /// <summary>
        /// 设置缴费记录审核成功
        /// </summary>
        /// <param name="coach"></param>
        /// <returns></returns>
        [HttpPost]
        public IHttpActionResult SetPayRecordAudited(dynamic coach)
        {
            try
            {

                if (!ModelState.IsValid)
                    return BadRequest();

                if (coach == null || coach.CoachID <= 0)
                    return BadRequest();

                int applyID = coach.ApplyID;
                int venueId = coach.VenueID;

                if (IsExist(applyID, venueId))
                {

                    System.Data.IDbConnection connection = Comm.Helper.DapperHelper.Instance;
                    using (connection)
                    {
                        connection.Open();
                        System.Data.IDbTransaction transaction = connection.BeginTransaction();

                        //设置为成功
                        var sql = "UPDATE [dbo].[ApplyBuyHours] SET [Status] =1 WHERE ApplyID=@ApplyID";
                        connection.Execute(sql, new { ApplyID = applyID }, transaction);

                        try
                        {
                            //connection.Insert<Sys.Models.TeachingSchedule>(entityList, transaction);
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            logs.Error("排课失败", ex);
                            transaction.Rollback();
                            return BadRequest();
                        }
                    }

                    //添加课时

                    //StringBuilder sql = new StringBuilder();
                    //sql.Append("declare @id int;");
                    //sql.Append(" select @id = CHNID from ClassHoursNumber with(nolock) where [StudentID] = '" + StudentID + "' and CoachID = '" + CoachID + "' ");
                    //sql.Append(" if (@id > 0)   begin ");
                    //sql.Append("  update ClassHoursNumber set ClassNumber = ClassNumber +" + number + " where CHNID = @id ");
                    //sql.Append(" end else begin ");

                    //sql.Append(" insert into ClassHoursNumber(StudentID, CoachID, ClassNumber,VenueID) values('" + StudentID + "', '" + CoachID + "', '" + number + "','" + VenueID + "')");
                    //sql.Append(" end ");
                    ////1购买，2约课3学生请假退回，4老师请假退回，5学校停课退回
                    //sql.Append(" INSERT INTO [ClassHoursDetailed]([DType],[VenueID],[CoachID],[StudentID],[Remark],[DNumber],CMoney) values(1,'" + VenueID + "','" + CoachID + "','" + StudentID + "','购买课时','" + number + "','" + CMoney + "') ");

                    var flag = true;
                    return flag ? Ok(Comm.ResponseModel.ResponseModelBase.Success()) : Ok(Comm.ResponseModel.ResponseModelBase.SysError());
                }
                else
                {
                    return Ok(Comm.ResponseModel.ResponseModelBase.GetRes("场馆下没有要审核的支付记录"));
                }
            }
            catch (Exception ex)
            {
                logs.Error("设置教练审核通过失败", ex);
                return BadRequest();
            }
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="query"></param>
        /// <returns></returns>
        [HttpGet]
        public IHttpActionResult Page4Venue(string query)
        {
            try
            {

                if (!ModelState.IsValid)
                    return BadRequest();

                Comm.RequestModel.RequestModelBase<Models.RequestModel.ApplyBuyHoursRequest> oData = Newtonsoft.Json.JsonConvert.DeserializeObject<Comm.RequestModel.RequestModelBase<Models.RequestModel.ApplyBuyHoursRequest>>(query);

                if (oData.PageIndex < 0 || oData.PageSize <= 0)
                    return BadRequest();

                PageCriteria criteria = new PageCriteria();
                criteria.Condition = "1=1";

                criteria.Condition += string.Format(" and t.VenueID = {0}", oData.SearchCondition.VenueID);

                if (oData.SearchCondition.CoachID > 0)
                    criteria.Condition += string.Format(" and t.CoachID = {0}", oData.SearchCondition.CoachID);
                if (oData.SearchCondition.StudentID > 0)
                    criteria.Condition += string.Format(" and t.StudentID = {0}", oData.SearchCondition.StudentID);
                if (oData.SearchCondition.Status > -1)
                    criteria.Condition += string.Format(" and t.Status = {0}", oData.SearchCondition.Status);
                if (oData.SearchCondition.PKType > 0)
                    criteria.Condition += string.Format(" and t.PKType = {0}", oData.SearchCondition.PKType);
                if (!string.IsNullOrEmpty(oData.SearchCondition.StartTime))
                    criteria.Condition += string.Format(" and t.AddTime >= '{0}'", oData.SearchCondition.StartTime);
                if (!string.IsNullOrEmpty(oData.SearchCondition.EndTime))
                    criteria.Condition += string.Format(" and t.AddTime < '{0}'", Convert.ToDateTime(oData.SearchCondition.EndTime).AddDays(1));

                criteria.CurrentPage = oData.PageIndex + 1;
                criteria.Fields = "[ApplyID],[StudentID],[CoachID],[ClassNumber],[AddTime],[PayMoney],[Status],[PKType],[PaidMoney],[VenueID],[StudentFullName],[CoachFullName]";
                criteria.PageSize = oData.PageSize;
                criteria.TableName = "[ApplyBuyHours]";
                criteria.PrimaryKey = "ApplyID";

                var r = Comm.Helper.DapperHelper.GetPageData<Sys.Models.ApplyBuyHours>(criteria);

                return Ok(new Comm.ResponseModel.ResponseModel4Page<Sys.Models.ApplyBuyHours>()
                {
                    data = r.Items,
                    recordsFiltered = r.TotalNum,
                    recordsTotal = r.TotalNum,
                });
            }
            catch (Exception ex)
            {
                logs.Error("缴费记录查询失败", ex);
                return BadRequest();
            }
        }

        /// <summary>
        /// 是否已经录入缴费记录
        /// </summary>
        /// <param name="applyID"></param>
        /// <param name="venueId"></param>
        /// <returns></returns>
        private bool IsExist(int applyID, int venueId)
        {

            var sql = "SELECT count([ApplyID]) FROM [dbo].[ApplyBuyHours] where ApplyID=@ApplyID and VenueID=@VenueID ";
            var count = DapperHelper.Instance.Query<int>(sql, new { ApplyID = applyID, VenueID = venueId });

            return count.FirstOrDefault() > 0;
        }

    }
}
